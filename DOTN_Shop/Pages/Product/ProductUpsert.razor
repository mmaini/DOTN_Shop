@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager


<div class="row my-2">
    <h3 class="card card-subtitle text-primary mb-3 ml-3">@Title product</h3>
    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea @bind-Value="Product.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                </div>

                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"> </InputCheckbox>
                            <label class="form-check-label"> Is shop favorites </label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"> </InputCheckbox>
                            <label class="form-check-label"> Is customer favorites </label>
                        </div>
                    </div>

                    <div class="form-group col-6">
                        <label> Category </label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select category</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                    </div>
                </div>





                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private ProductDTO Product { get; set; } = new ProductDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }

    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories =  _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.Get(Id);
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            await _productRepository.Create(Product);
        }
        else
        {
            await _productRepository.Update(Product);

        }
        _navigationManager.NavigateTo("product");
    }
}
